<?php


namespace Healsdata\Wordzee\Test\Word;


use Healsdata\Wordzee\PotentialPlay;
use Healsdata\Wordzee\Scorer;
use PHPUnit\Framework\TestCase;

class ScorerTest extends TestCase
{
    private Scorer $scorer;

    public function setUp(): void
    {
        $this->scorer = new Scorer([
            "a" => "2",
            "b" => "3",
            "c" => "3",
            "d" => "3",
            "e" => "2",
            "f" => "3",
            "g" => "3",
            "h" => "3",
            "i" => "2",
            "j" => "3",
            "k" => "3",
            "l" => "3",
            "m" => "3",
            "n" => "3",
            "o" => "2",
            "p" => "3",
            "q" => "3",
            "r" => "3",
            "s" => "3",
            "t" => "3",
            "u" => "2",
            "v" => "3",
            "w" => "3",
            "x" => "3",
            "y" => "2",
            "z" => "3"
        ]);

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function dataProviderTestScores()
    {
        return [
            ["", 0],
            ["zzzz", 12],
            ["ZzZz", 12],
            ["abcd", 11],
            ["aabb", 10],
            ["aa11", 4],
        ];
    }

    /**
     * @dataProvider dataProviderTestScores
     * @param string $word
     * @param int $expected
     */
    public function testScoreWord(string $word, int $expected)
    {
        $actual = $this->scorer->scoreWord($word);

        $this->assertEquals($expected, $actual);
    }

    public function dataProviderPotentialPlays()
    {
        return [
            ["zzzz", 12, "1111"],
            ["zzzz", 21, "1231"],
            ["zzzz", 24, "111D"],
            ["zzzz", 36, "111T"],
            ["zzzz", 108, "22DT"],
        ];
    }

    /**
     * @dataProvider dataProviderPotentialPlays
     * @param string $word
     * @param int $expected
     */
    public function testScorePotentialPlay(string $word, int $expected, string $line)
    {
        $potentialPlay = new PotentialPlay($word, $line);

        $actual = $this->scorer->scorePotentialPlay($potentialPlay);

        $this->assertEquals($expected, $actual);
    }
}